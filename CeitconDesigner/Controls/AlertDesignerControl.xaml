<UserControl x:Class="Ceitcon_Designer.Controls.AlertDesignerControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:view="clr-namespace:Ceitcon_Designer.View"
             xmlns:model="clr-namespace:Ceitcon_Data.Model;assembly=Ceitcon_Data"
             xmlns:playModel="clr-namespace:Ceitcon_Data.Model.Playlist;assembly=Ceitcon_Data"
             xmlns:viewModel="clr-namespace:Ceitcon_Designer.ViewModel"
             xmlns:utilities="clr-namespace:Ceitcon_Designer.Utilities"
             xmlns:controls="clr-namespace:Ceitcon_Designer.Controls"
             xmlns:converters="clr-namespace:Ceitcon_Designer.Converters"
             xmlns:behaviors="clr-namespace:Ceitcon_Designer.Behaviors"
             xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             IsVisibleChanged="UserControl_IsVisibleChanged"
             xmlns:ncore="http://schemas.ncore.com/wpf/xaml/colorbox">
    <UserControl.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Copy" Executed="CopyCommand_Executed" CanExecute="CopyCommand_CanExecute" />
        <CommandBinding Command="ApplicationCommands.Paste" Executed="PasteCommand_Executed" CanExecute="PasteCommand_CanExecute" />
        <CommandBinding Command="ApplicationCommands.Undo" Executed="UndoCommand_Executed" CanExecute="UndoCommand_CanExecute" />
        <CommandBinding Command="ApplicationCommands.Redo" Executed="RedoCommand_Executed" CanExecute="RedoCommand_CanExecute" />
    </UserControl.CommandBindings>
    <UserControl.Resources>
        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource StandartTextBlock}"/>
        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource StandartTextBox}"/>
        <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource StandartScrollBar}"/>

        <Style x:Key="AlertListBoxItem" TargetType="{x:Type ListBoxItem}">
            <EventSetter Event="PreviewMouseLeftButtonDown" Handler="AlertList_PreviewMouseLeftButtonDown" />
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <ContentPresenter Content="{TemplateBinding DataContext}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Resources>
                <DataTemplate DataType="{x:Type model:AlertModel}">
                    <Border BorderThickness="1" BorderBrush="{StaticResource BackgroundDark}" Background="{StaticResource BackgroundLight}">
                        <Grid Height="120">
                            <Viewbox Stretch="Uniform" Margin="0,0,0,30">
                                <Canvas Background="WhiteSmoke" Height="{Binding Height, Mode=OneWay}" Width="{Binding Width, Mode=OneWay}" VerticalAlignment="Top">
                                    <ItemsControl ItemsSource="{Binding Path=Controls, Mode=OneWay}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <Canvas/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemContainerStyle>
                                            <Style TargetType="ContentPresenter">
                                                <Setter Property="Canvas.Left" Value="{Binding X, Mode=OneWay}"/>
                                                <Setter Property="Canvas.Top" Value="{Binding Y, Mode=OneWay}"/>
                                            </Style>
                                        </ItemsControl.ItemContainerStyle>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <Rectangle Fill="{StaticResource BackgroundNormal}" Width="{Binding Width, Mode=OneWay}" Height="{Binding Height, Mode=OneWay}"/>
                                                <!--<TextBlock Text="{Binding Path=Name}" />-->
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </Canvas>
                            </Viewbox>

                            <Button Template="{StaticResource SimpleButton}" ToolTip="Remove Alert" Command="view:CustomCommands.RemoveAlert" Margin="5" HorizontalAlignment="Right" VerticalAlignment="Top">
                                <Image Source="../Images/iconButton_Window_Close.png" Height="20" Width="20"/>
                            </Button>
                            <TextBlock Margin="5" Text="{Binding Name}" Width="120" VerticalAlignment="Bottom" HorizontalAlignment="Left" Foreground="{StaticResource TextColor}"/>
                            <TextBlock Margin="5" Text="{Binding Duration}" VerticalAlignment="Bottom" HorizontalAlignment="Right" Foreground="{StaticResource TextColor}"/>
                        </Grid>
                    </Border>
                </DataTemplate>
            </Style.Resources>
        </Style>

        <Style x:Key="SlotListBoxItem" TargetType="{x:Type ListBoxItem}">
            <!--<EventSetter Event="ListBoxItem.PreviewMouseLeftButtonDown" Handler="SlotList_PreviewMouseLeftButtonDown"/>
            <EventSetter Event="ListBoxItem.Drop" Handler="SlotListBox_Drop"/>-->
            <!--<Setter Property="AllowDrop" Value="True"/>-->
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <ContentPresenter Content="{TemplateBinding DataContext}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True" >
                    <Setter Property="FontWeight" Value="Bold" />
                    <Setter Property="Background" Value="Transparent" />
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <DataTemplate DataType="{x:Type model:SlotModel}">
                    <Border BorderThickness="1" BorderBrush="{StaticResource BackgroundDark}" Background="{StaticResource BackgroundLight}">
                        <Grid>
                            <TextBlock Margin="30,0,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Foreground="{StaticResource TextColor}">
                                <TextBlock.Text>
                                    <MultiBinding StringFormat="{}{0} ({1})">
                                        <Binding Path="Name" />
                                        <Binding Path="Duration" />
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>

                            <Expander IsExpanded="True">
                                <Grid Background="{StaticResource BackgroundLight}">
                                    <Grid.Resources>
                                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource StandartTextBlock}">
                                            <Setter Property="FontSize" Value="12" />
                                        </Style>
                                    </Grid.Resources>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="3*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Text="Start Time (local time):" Margin="5,10,0,0"/>
                                    <telerik:RadDateTimePicker Grid.Row="1" SelectedValue="{Binding Start, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="5" HorizontalAlignment="Left" Foreground="{StaticResource TextColor}"/>

                                    <!--<TextBox Grid.Row="1" Text="{Binding Start, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:hh}:{0:mm}:{0:ss}, FallbackValue=00:00:00}" Width="100" MaxLength="9" Margin="5" HorizontalAlignment="Left"/>-->
                                    <TextBlock Grid.Column="1" Text="Duration:" Margin="5,10,0,0"/>
                                    <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding Duration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:hh}:{0:mm}:{0:ss}, FallbackValue=00:00:00}" Width="100" MaxLength="9" Margin="5" HorizontalAlignment="Left" />
                                </Grid>
                            </Expander>
                        </Grid>
                    </Border>
                </DataTemplate>
            </Style.Resources>
        </Style>

        <Style x:Key="LayerControlListBoxItem" TargetType="{x:Type ListBoxItem}">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <ContentPresenter Content="{TemplateBinding DataContext}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Resources>
                <DataTemplate DataType="{x:Type model:ControlModel}">
                    <Border BorderThickness="1" BorderBrush="{StaticResource BackgroundDark}" Background="{StaticResource BackgroundLight}">
                        <StackPanel Orientation="Horizontal">
                            <Image Source="../Images/iconLayer_Expanded.png" Height="16" Margin="5"/>
                            <ToggleButton IsChecked="{Binding IsVisible}" Margin="5">
                                <Image Height="16">
                                    <Image.Style>
                                        <Style TargetType="{x:Type Image}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsVisible}" Value="true">
                                                    <Setter Property="Source" Value="../Images/iconControlVisibility_Visible.png"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsVisible}" Value="false">
                                                    <Setter Property="Source" Value="../Images/iconControlVisibility_Hidden.png"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </ToggleButton>

                            <TextBlock Text="{Binding Name}" Margin="5" Foreground="{StaticResource TextColor}" Width="230" />

                            <ToggleButton IsChecked="{Binding IsLocked}" Margin="5">
                                <Image Height="16">
                                    <Image.Style>
                                        <Style TargetType="{x:Type Image}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsLocked}" Value="true">
                                                    <Setter Property="Source" Value="../Images/iconLocked.png"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsLocked}" Value="false">
                                                    <Setter Property="Source" Value="../Images/iconUnlocked.png"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </ToggleButton>
                        </StackPanel>
                    </Border>
                </DataTemplate>
            </Style.Resources>
        </Style>

        <Style x:Key="PlaylistListBoxItem" TargetType="{x:Type ListBoxItem}">
            <EventSetter Event="PreviewMouseLeftButtonDown" Handler="PlaylistList_PreviewMouseLeftButtonDown" />
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <ContentPresenter Content="{TemplateBinding DataContext}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Resources>
                <DataTemplate DataType="{x:Type playModel:SetContentModel}">
                    <controls:PlaylistControl>
                        <controls:PlaylistControl.AdditionalContent>
                            <Grid>
                                <StackPanel Orientation="Horizontal" Visibility="{Binding SourceMode, Mode=OneTime, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}">
                                    <Button Template="{StaticResource SimpleButton}" Width="20" Height="20" Margin="5" Command="view:CustomCommands.AddSource" ToolTip="Select source">
                                        <Image Source="../Images/iconButton_SourceAdd.png" />
                                    </Button>
                                    <Button Template="{StaticResource SimpleButton}" Width="20" Height="20" Margin="0,5,5,5" Command="view:CustomCommands.ClearSource" ToolTip="Clear source">
                                        <Image Source="../Images/iconButton_SourceClear.png" />
                                    </Button>
                                    <TextBlock Text="{Binding Content, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, TargetNullValue='No Source'}" Style="{StaticResource StandartTextBlock}"
                                               ToolTip="{Binding Content, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, TargetNullValue='No Source'}"
                                               Margin="5" VerticalAlignment="Center" Width="250" FontSize="12"/>
                                </StackPanel>

                                <StackPanel Orientation="Vertical" Visibility="{Binding TextMode, Mode=OneTime, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}">
                                    <TextBox Margin="5" Text="{Binding Content, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                         TextWrapping="NoWrap" VerticalScrollBarVisibility="Auto" AcceptsReturn="True" Width="300">
                                        <i:Interaction.Behaviors>
                                            <behaviors:TextBoxEnterKeyUpdateBehavior />
                                        </i:Interaction.Behaviors>
                                    </TextBox>
                                    <TextBlock Text="Dynamic text example topic:mytopic" Style="{StaticResource StandartTextBlock}" Margin="5" HorizontalAlignment="Left"/>
                                </StackPanel>

                                <Grid Visibility="{Binding PrayerSourceMode, Mode=OneTime, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Text="Fajr: " Style="{StaticResource StandartTextBlock}" Margin="5" VerticalAlignment="Center"/>
                                    <Button Grid.Column="1" Template="{StaticResource SimpleButton}" Width="20" Height="20" Margin="5" Command="view:CustomCommands.AddFajrSource" ToolTip="Select source">
                                        <Image Source="../Images/iconButton_SourceAdd.png" />
                                    </Button>
                                    <Button Grid.Column="2" Template="{StaticResource SimpleButton}" Width="20" Height="20" Margin="0,5,5,5" Command="view:CustomCommands.ClearFajrSource" ToolTip="Clear source">
                                        <Image Source="../Images/iconButton_SourceClear.png" />
                                    </Button>
                                    <TextBlock Grid.Column="3" Text="{Binding Fajr, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, TargetNullValue='No Source'}" Style="{StaticResource StandartTextBlock}"
                                               ToolTip="{Binding Fajr, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, TargetNullValue='No Source'}"
                                               Margin="5" VerticalAlignment="Center" Width="250" FontSize="12"/>

                                    <TextBlock Grid.Row="1" Text="Dhuhr: " Style="{StaticResource StandartTextBlock}" Margin="5" VerticalAlignment="Center"/>
                                    <Button Grid.Row="1" Grid.Column="1" Template="{StaticResource SimpleButton}" Width="20" Height="20" Margin="5" Command="view:CustomCommands.AddDhuhrSource" ToolTip="Select source">
                                        <Image Source="../Images/iconButton_SourceAdd.png" />
                                    </Button>
                                    <Button Grid.Row="1" Grid.Column="2" Template="{StaticResource SimpleButton}" Width="20" Height="20" Margin="0,5,5,5" Command="view:CustomCommands.ClearDhuhrSource" ToolTip="Clear source">
                                        <Image Source="../Images/iconButton_SourceClear.png" />
                                    </Button>
                                    <TextBlock Grid.Row="1" Grid.Column="3" Text="{Binding Dhuhr, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, TargetNullValue='No Source'}" Style="{StaticResource StandartTextBlock}"
                                               ToolTip="{Binding Dhuhr, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, TargetNullValue='No Source'}"
                                               Margin="5" VerticalAlignment="Center" Width="250" FontSize="12"/>

                                    <TextBlock Grid.Row="2" Text="Asr: " Style="{StaticResource StandartTextBlock}" Margin="5" VerticalAlignment="Center"/>
                                    <Button Grid.Row="2" Grid.Column="1" Template="{StaticResource SimpleButton}" Width="20" Height="20" Margin="5" Command="view:CustomCommands.AddAsrSource" ToolTip="Select source">
                                        <Image Source="../Images/iconButton_SourceAdd.png" />
                                    </Button>
                                    <Button Grid.Row="2" Grid.Column="2" Template="{StaticResource SimpleButton}" Width="20" Height="20" Margin="0,5,5,5" Command="view:CustomCommands.ClearAsrSource" ToolTip="Clear source">
                                        <Image Source="../Images/iconButton_SourceClear.png" />
                                    </Button>
                                    <TextBlock Grid.Row="2" Grid.Column="3" Text="{Binding Asr, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, TargetNullValue='No Source'}" Style="{StaticResource StandartTextBlock}"
                                               ToolTip="{Binding Asr, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, TargetNullValue='No Source'}"
                                               Margin="5" VerticalAlignment="Center" Width="250" FontSize="12"/>

                                    <TextBlock Grid.Row="3" Text="Maghrib: " Style="{StaticResource StandartTextBlock}" Margin="5" VerticalAlignment="Center"/>
                                    <Button Grid.Row="3" Grid.Column="1" Template="{StaticResource SimpleButton}" Width="20" Height="20" Margin="5" Command="view:CustomCommands.AddMaghribSource" ToolTip="Select source">
                                        <Image Source="../Images/iconButton_SourceAdd.png" />
                                    </Button>
                                    <Button Grid.Row="3" Grid.Column="2" Template="{StaticResource SimpleButton}" Width="20" Height="20" Margin="0,5,5,5" Command="view:CustomCommands.ClearMaghribSource" ToolTip="Clear source">
                                        <Image Source="../Images/iconButton_SourceClear.png" />
                                    </Button>
                                    <TextBlock Grid.Row="3" Grid.Column="3" Text="{Binding Maghrib, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, TargetNullValue='No Source'}" Style="{StaticResource StandartTextBlock}"
                                               ToolTip="{Binding Maghrib, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, TargetNullValue='No Source'}"
                                               Margin="5" VerticalAlignment="Center" Width="250" FontSize="12"/>
                                    
                                    <TextBlock Grid.Row="4" Text="Isha: " Style="{StaticResource StandartTextBlock}" Margin="5" VerticalAlignment="Center"/>
                                    <Button Grid.Row="4" Grid.Column="1" Template="{StaticResource SimpleButton}" Width="20" Height="20" Margin="5" Command="view:CustomCommands.AddIshaSource" ToolTip="Select source">
                                        <Image Source="../Images/iconButton_SourceAdd.png" />
                                    </Button>
                                    <Button Grid.Row="4" Grid.Column="2" Template="{StaticResource SimpleButton}" Width="20" Height="20" Margin="0,5,5,5" Command="view:CustomCommands.ClearIshaSource" ToolTip="Clear source">
                                        <Image Source="../Images/iconButton_SourceClear.png" />
                                    </Button>
                                    <TextBlock Grid.Row="4" Grid.Column="3" Text="{Binding Isha, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, TargetNullValue='No Source'}" Style="{StaticResource StandartTextBlock}"
                                               ToolTip="{Binding Isha, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, TargetNullValue='No Source'}"
                                               Margin="5" VerticalAlignment="Center" Width="250" FontSize="12"/>
                                </Grid>

                                <Grid Visibility="{Binding PrayerTextMode, Mode=OneTime, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Text="Fajr: " Style="{StaticResource StandartTextBlock}" Margin="5" VerticalAlignment="Center"/>
                                    <TextBox Grid.Column="1" Margin="5" Text="{Binding Fajr, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                             TextWrapping="NoWrap" VerticalScrollBarVisibility="Auto" AcceptsReturn="True" Width="300" MaxHeight="200">
                                        <i:Interaction.Behaviors>
                                            <behaviors:TextBoxEnterKeyUpdateBehavior />
                                        </i:Interaction.Behaviors>
                                    </TextBox>
                                    <TextBlock Grid.Row="1" Text="Dhuhr: " Style="{StaticResource StandartTextBlock}" Margin="5" VerticalAlignment="Center"/>
                                    <TextBox Grid.Row="1" Grid.Column="1" Margin="5" Text="{Binding Dhuhr, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                             TextWrapping="NoWrap" VerticalScrollBarVisibility="Auto" AcceptsReturn="True" Width="300">
                                        <i:Interaction.Behaviors>
                                            <behaviors:TextBoxEnterKeyUpdateBehavior />
                                        </i:Interaction.Behaviors>
                                    </TextBox>
                                    <TextBlock Grid.Row="2" Text="Asr: " Style="{StaticResource StandartTextBlock}" Margin="5" VerticalAlignment="Center"/>
                                    <TextBox Grid.Row="2" Grid.Column="1" Margin="5" Text="{Binding Asr, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                             TextWrapping="NoWrap" VerticalScrollBarVisibility="Auto" AcceptsReturn="True" Width="300">
                                        <i:Interaction.Behaviors>
                                            <behaviors:TextBoxEnterKeyUpdateBehavior />
                                        </i:Interaction.Behaviors>
                                    </TextBox>
                                    <TextBlock Grid.Row="3" Text="Maghrib: " Style="{StaticResource StandartTextBlock}" Margin="5" VerticalAlignment="Center"/>
                                    <TextBox Grid.Row="3" Grid.Column="1" Margin="5" Text="{Binding Maghrib, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                             TextWrapping="NoWrap" VerticalScrollBarVisibility="Auto" AcceptsReturn="True" Width="300">
                                        <i:Interaction.Behaviors>
                                            <behaviors:TextBoxEnterKeyUpdateBehavior />
                                        </i:Interaction.Behaviors>
                                    </TextBox>
                                    <TextBlock Grid.Row="4" Text="Isha: " Style="{StaticResource StandartTextBlock}" Margin="5" VerticalAlignment="Center"/>
                                    <TextBox Grid.Row="4" Grid.Column="1" Margin="5" Text="{Binding Isha, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                             TextWrapping="NoWrap" VerticalScrollBarVisibility="Auto" AcceptsReturn="True" Width="300">
                                        <i:Interaction.Behaviors>
                                            <behaviors:TextBoxEnterKeyUpdateBehavior />
                                        </i:Interaction.Behaviors>
                                    </TextBox>
                                </Grid>
                            </Grid>
                        </controls:PlaylistControl.AdditionalContent>
                    </controls:PlaylistControl>
                </DataTemplate>
                <DataTemplate DataType="{x:Type playModel:DelayModel}">
                    <controls:PlaylistControl />
                </DataTemplate>
                <DataTemplate DataType="{x:Type playModel:AnimateMarginModel}">
                    <controls:PlaylistControl>
                        <controls:PlaylistControl.AdditionalContent>
                            <StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="From:" VerticalAlignment="Center" Margin="5" Width="50" Style="{StaticResource StandartTextBlock}"/>
                                    <controls:MarginControl 
                                        MarginX="{Binding MarginThicknessLeftFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                        MarginY="{Binding MarginThicknessTopFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                        MarginW="{Binding MarginThicknessRightFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                        MarginZ="{Binding MarginThicknessBottomFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        MaxWidth="{Binding Parent.MaxWidth, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                        MaxHeight="{Binding Parent.MaxHeight, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="To:" VerticalAlignment="Center" Margin="5" Width="50" Style="{StaticResource StandartTextBlock}"/>
                                    <controls:MarginControl 
                                        MarginX="{Binding MarginThicknessLeftTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                        MarginY="{Binding MarginThicknessTopTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                        MarginW="{Binding MarginThicknessRightTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                        MarginZ="{Binding MarginThicknessBottomTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        MaxWidth="{Binding Parent.MaxWidth, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                        MaxHeight="{Binding Parent.MaxHeight, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                </StackPanel>
                            </StackPanel>
                        </controls:PlaylistControl.AdditionalContent>
                    </controls:PlaylistControl>
                </DataTemplate>
                <DataTemplate DataType="{x:Type playModel:AnimateOpacityModel}">
                    <controls:PlaylistControl>
                        <controls:PlaylistControl.AdditionalContent>
                            <StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="From:" VerticalAlignment="Center" Margin="5" Width="50" Style="{StaticResource StandartTextBlock}"/>
                                    <Slider Margin="5" Value="{Binding OpacityFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" HorizontalAlignment="Left" VerticalAlignment="Center" Minimum="0" Maximum="1" IsSnapToTickEnabled="True" LargeChange=".05" TickFrequency="0.05" SmallChange="0.05"/>
                                    <TextBox Margin="5" Text="{Binding OpacityFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:N2}}" Width="60"  MaxLength="5" HorizontalAlignment="Right" TextAlignment="Right"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="To:" VerticalAlignment="Center" Margin="5" Width="50" Style="{StaticResource StandartTextBlock}"/>
                                    <Slider Margin="5" Value="{Binding OpacityTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" HorizontalAlignment="Left" VerticalAlignment="Center" Minimum="0" Maximum="1" IsSnapToTickEnabled="True" LargeChange=".05" TickFrequency="0.05" SmallChange="0.05"/>
                                    <TextBox Margin="5" Text="{Binding OpacityTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:N2}}" Width="60"  MaxLength="5" HorizontalAlignment="Right" TextAlignment="Right"/>
                                </StackPanel>
                            </StackPanel>
                        </controls:PlaylistControl.AdditionalContent>
                    </controls:PlaylistControl>
                </DataTemplate>
                <DataTemplate DataType="{x:Type playModel:AnimateWidthModel}">
                    <controls:PlaylistControl>
                        <controls:PlaylistControl.AdditionalContent>
                            <StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="From:" VerticalAlignment="Center" Margin="5" Width="50" Style="{StaticResource StandartTextBlock}"/>
                                    <TextBox Text="{Binding WidthFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:N0}}" MaxLength="6" Margin="5" Width="57" HorizontalAlignment="Left" TextAlignment="Right"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="To:" VerticalAlignment="Center" Margin="5" Width="50" Style="{StaticResource StandartTextBlock}"/>
                                    <TextBox Text="{Binding WidthTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:N0}}" MaxLength="6" Margin="5" Width="57" HorizontalAlignment="Left" TextAlignment="Right"/>
                                </StackPanel>
                            </StackPanel>
                        </controls:PlaylistControl.AdditionalContent>
                    </controls:PlaylistControl>
                </DataTemplate>
                <DataTemplate DataType="{x:Type playModel:AnimateHeightModel}">
                    <controls:PlaylistControl>
                        <controls:PlaylistControl.AdditionalContent>
                            <StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="From:" VerticalAlignment="Center" Margin="5" Width="50" Style="{StaticResource StandartTextBlock}"/>
                                    <TextBox Text="{Binding HeightFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:N0}}" MaxLength="6" Margin="5" Width="57" HorizontalAlignment="Left" TextAlignment="Right"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="To:" VerticalAlignment="Center" Margin="5" Width="50" Style="{StaticResource StandartTextBlock}"/>
                                    <TextBox Text="{Binding HeightTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:N0}}" MaxLength="6" Margin="5" Width="57" HorizontalAlignment="Left" TextAlignment="Right"/>
                                </StackPanel>
                            </StackPanel>
                        </controls:PlaylistControl.AdditionalContent>
                    </controls:PlaylistControl>
                </DataTemplate>
                <DataTemplate DataType="{x:Type playModel:AnimateBorderModel}">
                    <controls:PlaylistControl>
                        <controls:PlaylistControl.AdditionalContent>
                            <StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="From:" VerticalAlignment="Center" Margin="5" Width="50" Style="{StaticResource StandartTextBlock}"/>
                                    <controls:MarginControl 
                                        MarginX="{Binding BorderThicknessLeftFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                        MarginY="{Binding BorderThicknessTopFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                        MarginW="{Binding BorderThicknessRightFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        MarginZ="{Binding BorderThicknessBottomFrom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        MaxWidth="{Binding Parent.MaxWidth, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                        MaxHeight="{Binding Parent.MaxHeight, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="To:" VerticalAlignment="Center" Margin="5" Width="50" Style="{StaticResource StandartTextBlock}"/>
                                    <controls:MarginControl 
                                        MarginX="{Binding BorderThicknessLeftTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                        MarginY="{Binding BorderThicknessTopTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                        MarginW="{Binding BorderThicknessRightTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                        MarginZ="{Binding BorderThicknessBottomTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        MaxWidth="{Binding Parent.MaxWidth, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                        MaxHeight="{Binding Parent.MaxHeight, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                </StackPanel>
                            </StackPanel>
                        </controls:PlaylistControl.AdditionalContent>
                    </controls:PlaylistControl>
                </DataTemplate>
                <DataTemplate DataType="{x:Type playModel:SuspendPlaybackModel}">
                    <controls:PlaylistControl />
                </DataTemplate>
                <DataTemplate DataType="{x:Type playModel:ResumePlaybackModel}">
                    <controls:PlaylistControl />
                </DataTemplate>
            </Style.Resources>
        </Style>

        <!--MoveThumb Template-->
        <ControlTemplate x:Key="MoveThumbTemplate" TargetType="{x:Type utilities:MoveThumb}">
            <Rectangle Fill="Transparent"/>
        </ControlTemplate>

        <!--ResizeDecorator Template-->
        <ControlTemplate x:Key="ResizeDecoratorTemplate" TargetType="{x:Type Control}">
            <Grid>
                <utilities:ResizeThumb Height="6" Cursor="SizeNS" Margin="0 -5 0 0" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                <utilities:ResizeThumb Width="6" Cursor="SizeWE" Margin="-5 0 0 0" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                <utilities:ResizeThumb Width="6" Cursor="SizeWE" Margin="0 0 -5 0" VerticalAlignment="Stretch" HorizontalAlignment="Right"/>
                <utilities:ResizeThumb Height="6" Cursor="SizeNS" Margin="0 0 0 -5" VerticalAlignment="Bottom" HorizontalAlignment="Stretch"/>
                <utilities:ResizeThumb Background="{StaticResource SelectedLight}" Width="20" Height="20" Cursor="SizeNS" Margin="0,-19,0,0" VerticalAlignment="Top" HorizontalAlignment="Center" Visibility="{Binding DataContext.IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}"/>
                <utilities:ResizeThumb Background="{StaticResource SelectedLight}" Width="20" Height="20" Cursor="SizeWE" Margin="-19,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="{Binding DataContext.IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}"/>
                <utilities:ResizeThumb Background="{StaticResource SelectedLight}" Width="20" Height="20" Cursor="SizeWE" Margin="0,0,-19,0" VerticalAlignment="Center" HorizontalAlignment="Right" Visibility="{Binding DataContext.IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}"/>
                <utilities:ResizeThumb Background="{StaticResource SelectedLight}" Width="20" Height="20" Cursor="SizeNS" Margin="0,0,0,-19" VerticalAlignment="Bottom" HorizontalAlignment="Center" Visibility="{Binding DataContext.IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}"/>
                <utilities:ResizeThumb Background="{StaticResource SelectedLight}" Width="20" Height="20" Cursor="SizeNWSE" Margin="-19 -19 0 0" VerticalAlignment="Top" HorizontalAlignment="Left" Visibility="{Binding DataContext.IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}"/>
                <utilities:ResizeThumb Background="{StaticResource SelectedLight}" Width="20" Height="20" Cursor="SizeNESW" Margin="0 -19 -19 0" VerticalAlignment="Top" HorizontalAlignment="Right" Visibility="{Binding DataContext.IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}"/>
                <utilities:ResizeThumb Background="{StaticResource SelectedLight}" Width="20" Height="20" Cursor="SizeNESW" Margin="-19 0 0 -19" VerticalAlignment="Bottom" HorizontalAlignment="Left" Visibility="{Binding DataContext.IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}"/>
                <utilities:ResizeThumb Background="{StaticResource SelectedLight}" Width="20" Height="20" Cursor="SizeNWSE" Margin="0 0 -19 -19" VerticalAlignment="Bottom" HorizontalAlignment="Right" Visibility="{Binding DataContext.IsSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}"/>
            </Grid>
        </ControlTemplate>

        <!--Designer Item Template-->
        <ControlTemplate x:Key="DesignerItemTemplate" TargetType="{x:Type ContentControl}">
            <Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                <utilities:MoveThumb Template="{StaticResource MoveThumbTemplate}" Cursor="SizeAll"/>
                <Control Template="{StaticResource ResizeDecoratorTemplate}"/>
                <ContentPresenter Content="{TemplateBinding ContentControl.Content}"/>
            </Grid>
        </ControlTemplate>

        <converters:StringToFontFamilyConverter x:Key="StringToFontFamily"/>
        <converters:PropertyToVisibilityConverter x:Key="PropertyToVisibility"/>

        <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="PlaylistTypeEnum">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="playModel:PlaylistType" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="HorizontalAlignmentEnum">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="HorizontalAlignment" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="VerticalAlignmentEnum">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="VerticalAlignment" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="StretchEnum">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="Stretch" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <CollectionViewSource Source="{Binding Source={x:Static Fonts.SystemFontFamilies}}" x:Key="FontFamilyCollection"/>

        <DataTemplate x:Key="FontFamilyTemplate" DataType="FontFamily">
            <TextBlock Text="{Binding Source}" FontSize="14" FontFamily="{Binding ., Converter={StaticResource StringToFontFamily}}"/>
        </DataTemplate>
    </UserControl.Resources>

    <Grid Background="{StaticResource BackgroundNormal}" Margin="0,-3,-3,0" >
        <Grid.RowDefinitions>
            <RowDefinition Height="100"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" MinWidth="400"/>
            <ColumnDefinition Width="Auto" MinWidth="300"/>
        </Grid.ColumnDefinitions>
        <Popup Name="PopupDepends" HorizontalOffset="-100" Width="200" Height="300" Placement="MousePoint">
            <Grid>
                <TextBlock Text="Select element" Margin="10,5,0,0" />
                <Button Template="{StaticResource SimpleButton}" ToolTip="Close popup" VerticalAlignment="Top" HorizontalAlignment="Right" Click="PopupCloseButton_Click">
                    <Image Source="../Images/iconButton_RemoveSlide_Campaign.png" Width="20" Height="20" Margin="5"/>
                </Button>
                <ListBox
                    BorderThickness="0" 
                    Margin="0,30,0,0"
                    HorizontalContentAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Background="Transparent"
                    ScrollViewer.HorizontalScrollBarVisibility="Disabled"  
                    ScrollViewer.VerticalScrollBarVisibility="Auto"  
                    ItemsSource="{Binding Project.SelectedRegion.SelectedSlide.SelectedLayer.SelectedControl.PlaylistWithoutSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                    PreviewMouseLeftButtonDown="DependList_PreviewMouseLeftButtonDown">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Name}" Foreground="{StaticResource TextColor}" FontSize="14"/>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </Grid>
        </Popup>
        
        <!--Buttons-->
        <TabControl Grid.ColumnSpan="3" VerticalAlignment="Top" Padding="0" Margin="-5,-4,-5,0" Background="{StaticResource BackgroundLight}" 
                    SelectedIndex="{Binding SelectedTool, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SelectionChanged="TabControl_SelectionChanged">
            <TabControl.Resources>
                <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource PropertyTabItem}"/>
            </TabControl.Resources>
            <TabItem Header="Edit"/>
            <TabItem Header="Media"/>
            <TabItem Header="Social"/>
            <TabItem Header="Prayer Alert" TabIndex="3">
                <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Background="{StaticResource BackgroundLight}" Margin="0,0,0,0">
                    <Button x:Name="PrayerImageButton" Template="{StaticResource SimpleButton}" Width="50" Margin="5,5,5,0" PreviewMouseLeftButtonDown="Button_PreviewMouseLeftButtonDown" PreviewMouseMove="Button_PreviewMouseMove" Cursor="ScrollAll" ToolTip="Image - Drag and Drop to diagram">
                        <StackPanel HorizontalAlignment="Center">
                            <Image Stretch="Uniform" Width="30" Height="30">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Style.Triggers>
                                            <Trigger Property="Button.IsMouseOver" Value="True">
                                                <Setter Property="Source" Value="../Images/iconImageControl_Active.png"/>
                                            </Trigger>
                                            <Trigger Property="Button.IsMouseOver" Value="False">
                                                <Setter Property="Source" Value="../Images/iconImageControl.png"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock Text="Image" FontSize="13"/>
                        </StackPanel>
                    </Button>
                    <Button x:Name="PrayerVideoButton"
                            Template="{StaticResource SimpleButton}"
                            Width="50"
                            Margin="5,5,5,0"
                            PreviewMouseLeftButtonDown="Button_PreviewMouseLeftButtonDown"
                            PreviewMouseMove="Button_PreviewMouseMove"
                            Cursor="ScrollAll"
                            ToolTip="Video - Drag and Drop to diagram">
                        <StackPanel HorizontalAlignment="Center">
                            <Image Stretch="Uniform"
                                   Width="30"
                                   Height="30">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Style.Triggers>
                                            <Trigger Property="Button.IsMouseOver"
                                                     Value="True">
                                                <Setter Property="Source"
                                                        Value="../Images/iconVideoControl_Active.png" />
                                            </Trigger>
                                            <Trigger Property="Button.IsMouseOver"
                                                     Value="False">
                                                <Setter Property="Source"
                                                        Value="../Images/iconVideoControl.png" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock Text="Video" FontSize="13" />
                        </StackPanel>
                    </Button>
                    
                    <Button x:Name="PrayerTextButton"
                            Template="{StaticResource SimpleButton}"
                            Width="50"
                            Margin="5,5,5,0"
                            PreviewMouseLeftButtonDown="Button_PreviewMouseLeftButtonDown"
                            PreviewMouseMove="Button_PreviewMouseMove"
                            Cursor="ScrollAll"
                            ToolTip="Text - Drag and Drop to diagram">
                        <StackPanel HorizontalAlignment="Center">
                            <Image Stretch="Uniform"
                                   Width="30"
                                   Height="30">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Style.Triggers>
                                            <Trigger Property="Button.IsMouseOver"
                                                     Value="True">
                                                <Setter Property="Source"
                                                        Value="../Images/iconRichTextControl_Active.png" />
                                            </Trigger>
                                            <Trigger Property="Button.IsMouseOver"
                                                     Value="False">
                                                <Setter Property="Source"
                                                        Value="../Images/iconRichTextControl.png" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock Text=" Text" FontSize="13" />
                        </StackPanel>
                    </Button>
                    <Button x:Name="PrayerYoutubeButton"
                            Template="{StaticResource SimpleButton}"
                            Width="50"
                            Margin="5,5,5,0"
                            PreviewMouseLeftButtonDown="Button_PreviewMouseLeftButtonDown"
                            PreviewMouseMove="Button_PreviewMouseMove"
                            Cursor="ScrollAll"
                            ToolTip="Youtube - Drag and Drop to diagram">
                        <StackPanel HorizontalAlignment="Center">
                            <Image Stretch="Uniform"
                                   Width="30"
                                   Height="30">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Style.Triggers>
                                            <Trigger Property="Button.IsMouseOver"
                                                     Value="True">
                                                <Setter Property="Source" Value="../Images/iconYoutubeControl_Active.png"/>
                                            </Trigger>
                                            <Trigger Property="Button.IsMouseOver"
                                                     Value="False">
                                                <Setter Property="Source" Value="../Images/iconYoutubeControl.png"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock Text="Youtube" FontSize="13" />
                        </StackPanel>
                    </Button>
                </StackPanel>
            </TabItem>
            <TabItem Header="Global Alert" TabIndex="4">
                <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Background="{StaticResource BackgroundLight}" Margin="0,0,0,0">
                    <Button x:Name="ImageGButton" Template="{StaticResource SimpleButton}" Width="50" Margin="5,5,5,0" PreviewMouseLeftButtonDown="Button_PreviewMouseLeftButtonDown" PreviewMouseMove="Button_PreviewMouseMove" Cursor="ScrollAll" ToolTip="Image - Drag and Drop to diagram">
                        <StackPanel HorizontalAlignment="Center">
                            <Image Stretch="Uniform" Width="30" Height="30">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Style.Triggers>
                                            <Trigger Property="Button.IsMouseOver" Value="True">
                                                <Setter Property="Source" Value="../Images/iconImageControl_Active.png"/>
                                            </Trigger>
                                            <Trigger Property="Button.IsMouseOver" Value="False">
                                                <Setter Property="Source" Value="../Images/iconImageControl.png"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock Text="Image" FontSize="13"/>
                        </StackPanel>
                    </Button>

                    <Button x:Name="VideoGButton"
                            Template="{StaticResource SimpleButton}"
                            Width="50"
                            Margin="5,5,5,0"
                            PreviewMouseLeftButtonDown="Button_PreviewMouseLeftButtonDown"
                            PreviewMouseMove="Button_PreviewMouseMove"
                            Cursor="ScrollAll"
                            ToolTip="Video - Drag and Drop to diagram">
                        <StackPanel HorizontalAlignment="Center">
                            <Image Stretch="Uniform"
                                   Width="30"
                                   Height="30">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Style.Triggers>
                                            <Trigger Property="Button.IsMouseOver"
                                                     Value="True">
                                                <Setter Property="Source"
                                                        Value="../Images/iconVideoControl_Active.png" />
                                            </Trigger>
                                            <Trigger Property="Button.IsMouseOver"
                                                     Value="False">
                                                <Setter Property="Source"
                                                        Value="../Images/iconVideoControl.png" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock Text="Video"
                                       FontSize="13" />
                        </StackPanel>
                    </Button>
                    
                    <Button x:Name="TextGButton"
                            Template="{StaticResource SimpleButton}"
                            Width="50"
                            Margin="5,5,5,0"
                            PreviewMouseLeftButtonDown="Button_PreviewMouseLeftButtonDown"
                            PreviewMouseMove="Button_PreviewMouseMove"
                            Cursor="ScrollAll"
                            ToolTip="Text - Drag and Drop to diagram">
                        <StackPanel HorizontalAlignment="Center">
                            <Image Stretch="Uniform"
                                   Width="30"
                                   Height="30">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Style.Triggers>
                                            <Trigger Property="Button.IsMouseOver"
                                                     Value="True">
                                                <Setter Property="Source"
                                                        Value="../Images/iconRichTextControl_Active.png" />
                                            </Trigger>
                                            <Trigger Property="Button.IsMouseOver"
                                                     Value="False">
                                                <Setter Property="Source"
                                                        Value="../Images/iconRichTextControl.png" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock Text=" Text"
                                       FontSize="13" />
                        </StackPanel>
                    </Button>
                    
                    <Button x:Name="GifAnimGButton" Template="{StaticResource SimpleButton}" Width="50" Margin="5,5,5,0" PreviewMouseLeftButtonDown="Button_PreviewMouseLeftButtonDown" PreviewMouseMove="Button_PreviewMouseMove" Cursor="ScrollAll" ToolTip="Gif Amimation - Drag and Drop to diagram">
                        <StackPanel HorizontalAlignment="Center">
                            <Image Stretch="Uniform" Width="30" Height="30">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Style.Triggers>
                                            <Trigger Property="Button.IsMouseOver" Value="True">
                                                <Setter Property="Source" Value="../Images/iconGifAnimControl_Active.png"/>
                                            </Trigger>
                                            <Trigger Property="Button.IsMouseOver" Value="False">
                                                <Setter Property="Source" Value="../Images/iconGifAnimControl.png"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock Text="Gif Animation" FontSize="13"/>
                        </StackPanel>
                    </Button>
                    
                    <Button x:Name="LiveGButton" Template="{StaticResource SimpleButton}" Margin="5,5,5,0" PreviewMouseLeftButtonDown="Button_PreviewMouseLeftButtonDown" PreviewMouseMove="Button_PreviewMouseMove" Cursor="ScrollAll" ToolTip="Live Video - Drag and Drop to diagram">
                        <StackPanel HorizontalAlignment="Center">
                            <Image Stretch="Uniform" Width="30" Height="30">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Style.Triggers>
                                            <Trigger Property="Button.IsMouseOver" Value="True">
                                                <Setter Property="Source" Value="../Images/iconLiveControl_Active.png"/>
                                            </Trigger>
                                            <Trigger Property="Button.IsMouseOver" Value="False">
                                                <Setter Property="Source" Value="../Images/iconLiveControl.png"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock Text="Live Stream" FontSize="13"/>
                        </StackPanel>
                    </Button>
                  
                    <Button x:Name="PrayerYoutubeGButton"
                            Template="{StaticResource SimpleButton}"
                            Width="58"
                            Margin="5,5,5,0"
                            PreviewMouseLeftButtonDown="Button_PreviewMouseLeftButtonDown"
                            PreviewMouseMove="Button_PreviewMouseMove"
                            Cursor="ScrollAll"
                            ToolTip="Youtube - Drag and Drop to diagram">
                        <StackPanel HorizontalAlignment="Center">
                            <Image Stretch="Uniform"
                                   Width="30"
                                   Height="30">
                                <Image.Style>
                                    <Style TargetType="{x:Type Image}">
                                        <Style.Triggers>
                                            <Trigger Property="Button.IsMouseOver"
                                                     Value="True">
                                                <Setter Property="Source" Value="../Images/iconYoutubeControl_Active.png"/>
                                            </Trigger>
                                            <Trigger Property="Button.IsMouseOver"
                                                     Value="False">
                                                <Setter Property="Source" Value="../Images/iconYoutubeControl.png"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock Text="Youtube" FontSize="13" />
                        </StackPanel>
                    </Button>
                    
                </StackPanel>
            </TabItem>
        </TabControl>
        
        <!--Designer Panel-->
        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.Background>
                <DrawingBrush TileMode="Tile" Viewport="0,0,20,20" ViewportUnits="Absolute">
                    <DrawingBrush.Drawing>
                        <GeometryDrawing  Brush="White">
                            <GeometryDrawing.Geometry>
                                <RectangleGeometry Rect="0,0,40,40"/>
                            </GeometryDrawing.Geometry>
                            <GeometryDrawing.Pen>
                                <Pen Brush="LightGray" Thickness="0.2"/>
                            </GeometryDrawing.Pen>
                        </GeometryDrawing>
                    </DrawingBrush.Drawing>
                </DrawingBrush>
            </Grid.Background>

            <utilities:PixelRuler x:Name="RulerH" Grid.Column="1" AutoSize="True" SmallStep="100" Step="200" Zoom="{Binding ElementName=zoomSlider, Path=Value}"/>
            <utilities:PixelRuler x:Name="RulerV" Grid.Row="1" AutoSize="True" SmallStep="100" Step="200" Zoom="{Binding ElementName=zoomSlider, Path=Value}">
                <utilities:PixelRuler.LayoutTransform>
                    <TransformGroup>
                        <RotateTransform Angle="90" />
                    </TransformGroup>
                </utilities:PixelRuler.LayoutTransform  >
            </utilities:PixelRuler>

            <ScrollViewer Grid.Row="1" Grid.Column="1" x:Name="DesignerScreen"
                Background="Transparent"
                HorizontalScrollBarVisibility="Auto"
                VerticalScrollBarVisibility="Auto"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center">
                <Grid x:Name="RegionGrid">
                    <Grid.Resources>
                        <Style TargetType="{x:Type Grid}">
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="{Binding ElementName=zoomSlider, Path=Value}" ScaleY="{Binding ElementName=zoomSlider, Path=Value}"/>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Grid.Resources>
                    <Canvas Width="{Binding Project.SelectedRegion.Width, Mode=OneWay}"
                        Height="{Binding Project.SelectedRegion.Height, Mode=OneWay}" 
                        Margin="{Binding Project.SelectedRegion.Margin, Mode=OneWay}"
                        Background="{StaticResource BackgroundDark}" 
                        x:Name="AlertCanvas" 
                        PreviewMouseLeftButtonDown="AlertCanvas_PreviewMouseLeftButtonDown" 
                        PreviewMouseLeftButtonUp="AlertCanvas_PreviewMouseLeftButtonUp" 
                        MouseWheel="RegionCanvas_MouseWheel"
                        AllowDrop="True"
                        DragEnter="Canvas_DragEnter" 
                        Drop="Canvas_Drop" 
                        Panel.ZIndex="2">
                    </Canvas>
                </Grid>
            </ScrollViewer>

            <Grid Grid.Row="2" Grid.ColumnSpan="2" Background="{StaticResource BackgroundLight}">
                <ToggleButton x:Name="tbSnap" Background="Transparent" Width="20" Height="20" IsTabStop="False" HorizontalAlignment="Left" Margin="0,5,5,5" ToolTip="Snap to grid" Click="SnapButton_Click">
                    <Image Stretch="Uniform">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=tbSnap,Path=IsChecked}" Value="True">
                                        <Setter Property="Source" Value="../Images/iconButtonSnapToGrid.png" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ElementName=tbSnap,Path=IsChecked}" Value="False">
                                        <Setter Property="Source" Value="../Images/iconButtonSnapToGrid_Active.png" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                </ToggleButton>

                <ToggleButton x:Name="tbGrid" Background="Transparent" Width="20" Height="20" IsTabStop="False" HorizontalAlignment="Left" Margin="25,5,5,5" ToolTip="Show grid" Click="GridButton_Click">
                    <Image Stretch="Uniform">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=tbGrid,Path=IsChecked}" Value="True">
                                        <Setter Property="Source" Value="../Images/iconButtonShowGrid.png" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ElementName=tbGrid,Path=IsChecked}" Value="False">
                                        <Setter Property="Source" Value="../Images/iconButtonShowGrid_Active.png" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                </ToggleButton>


                <TextBlock Foreground="{StaticResource TextColor}" VerticalAlignment="Center" FontSize="10" HorizontalAlignment="Left" Margin="50,5,5,5">
                    <TextBlock.Text>
                        <MultiBinding StringFormat="{}{0} ({1} x {2}) : {3}">
                            <Binding Path="Project.SelectedAlert.Name" />
                            <Binding Path="Project.SelectedRegion.Width" />
                            <Binding Path="Project.SelectedRegion.Height" />
                            <Binding Path="Project.SelectedObject.Name" />
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>

                <Button Template="{StaticResource SimpleButton}" Margin="0,5,180,5" HorizontalAlignment="Right" Width="20" Height="20" Click="ZoomOutButton_Click">
                    <Image Source="../Images/iconButton_ZoomOut.png" />
                </Button>
                <Button Template="{StaticResource SimpleButton}" Margin="5" HorizontalAlignment="Right" Width="20" Height="20" Click="ZoomInButton_Click">
                    <Image Source="../Images/iconButton_ZoomIn.png" />
                </Button>
                <Button Template="{StaticResource SimpleButton}" Margin="0,5,205,5" HorizontalAlignment="Right" Width="20" Height="20" Click="ZoomFullButton_Click">
                    <Image Source="../Images/iconButton_ZoomFull.png" />
                </Button>
                <Slider x:Name="zoomSlider" HorizontalAlignment="Right" Width="140" Margin="0,5,30,0" Value="0.25" Minimum="0.10" Maximum="1" IsSnapToTickEnabled="True" LargeChange=".05" TickFrequency="0.05" SmallChange="0.05"/>
            </Grid>
        </Grid>

        <!--Properties-->
        <TabControl Name="PropertiesTab" Grid.Column="1" Grid.Row="1" Grid.RowSpan="2" SelectedIndex="0" Margin="0" Padding="0" Background="{StaticResource BackgroundNormal}">
            <TabControl.Resources>
                <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource PropertyTabItem}"/>
            </TabControl.Resources>

            <TabItem Header="Prayer Alerts"
                Visibility="{Binding IsPrayerAlert, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}">
                <Grid VerticalAlignment="Stretch" Background="{StaticResource BackgroundLight}">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Top">
                        <Button HorizontalAlignment="Right" Template="{StaticResource SimpleButton}" Margin="5" ToolTip="New Alert" Click="NewPrayerAlertButton_Click">
                            <Image Source="../Images/iconButton_AddSlide.png" Width="20" Height="20"/>
                        </Button>
                    </Grid>

                    <ListBox Margin="5,40,5,5"
                        BorderThickness="0"
                        HorizontalContentAlignment="Stretch"
                        Background="Transparent"
                        ScrollViewer.HorizontalScrollBarVisibility="Disabled"  
                        ItemsSource="{Binding Project.PrayerAlerts, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        SelectedItem="{Binding Project.SelectedAlert, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        ItemContainerStyle="{StaticResource AlertListBoxItem}"
                        />
                </Grid>
            </TabItem>

            <TabItem Header="Global Alerts"
                Visibility="{Binding IsGlobalAlert, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}">
                <Grid VerticalAlignment="Stretch" Background="{StaticResource BackgroundLight}">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Top">
                        <Button HorizontalAlignment="Right" Template="{StaticResource SimpleButton}" Margin="5" ToolTip="New Alert" Click="NewGlobalAlertButton_Click">
                            <Image Source="../Images/iconButton_AddSlide.png" Width="20" Height="20"/>
                        </Button>
                    </Grid>

                    <ListBox Margin="5,40,5,5"
                        BorderThickness="0"
                        HorizontalContentAlignment="Stretch"
                        Background="Transparent"
                        ScrollViewer.HorizontalScrollBarVisibility="Disabled"  
                        ItemsSource="{Binding Project.GlobalAlerts, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                        SelectedItem="{Binding Project.SelectedAlert, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        ItemContainerStyle="{StaticResource AlertListBoxItem}"
                        />
                </Grid>
            </TabItem>

            <TabItem Header="Timer"
                     Visibility="{Binding IsPrayerAlert, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}">
                <Grid Background="{StaticResource BackgroundLight}">
                    <Grid.Resources>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource StandartTextBlock}">
                            <Setter Property="FontSize" Value="12" />
                        </Style>
                    </Grid.Resources>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Row="0" Text="Country:" Margin="5,10,0,0"/>
                    <ComboBox Grid.Row="0" Grid.Column="1" Margin="5" 
                             ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}, Path=DataContext.Countries, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                             SelectedIndex="0"/>

                    <TextBlock Grid.Row="1" Text="City:" Margin="5,10,0,0"/>
                    <ComboBox Grid.Row="1" Grid.Column="1" Margin="5" 
                             ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}, Path=DataContext.Locations, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                             DisplayMemberPath="City"
                             SelectedItem="{Binding Project.SelectedAlert.SelectedSlot.Location, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                    <TextBlock Grid.Row="2" Text="Latitude:" Margin="5,10,0,0"/>
                    <TextBox Grid.Row="2" Grid.Column="1" IsEnabled="False" Text="{Binding Project.SelectedAlert.SelectedSlot.Location.Latitude, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Width="100" MaxLength="8" Margin="5" HorizontalAlignment="Left" />

                    <TextBlock Grid.Row="3" Text="Longnitude:" Margin="5,10,0,0"/>
                    <TextBox Grid.Row="3" Grid.Column="1" IsEnabled="False" Text="{Binding Project.SelectedAlert.SelectedSlot.Location.Longnitude, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Width="100" MaxLength="8" Margin="5" HorizontalAlignment="Left" />

                    <TextBlock Grid.Row="4" Text="Duration:" Margin="5,10,0,0"/>
                    <TextBox Grid.Row="4" Grid.Column="1" Text="{Binding Project.SelectedAlert.SelectedSlot.Duration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:hh}:{0:mm}:{0:ss}, FallbackValue=00:00:00}" Width="100" MaxLength="9" Margin="5" HorizontalAlignment="Left" />
                </Grid>
            </TabItem>
            
            <TabItem Header="Slots"
                     Visibility="{Binding IsGlobalAlert, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}">
                <Grid Background="{StaticResource BackgroundNormal}">
                    <Button Template="{StaticResource SimpleButton}" ToolTip="Add Slot" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0,0,30,0" Click="AddSlotButton_Click">
                        <StackPanel Orientation="Vertical" Margin="5">
                            <Image Source="../Images/iconButton_AddLayer.png" Width="20" Height="20" />
                        </StackPanel>
                    </Button>
                    <Button Template="{StaticResource SimpleButton}" ToolTip="Delete Slot" VerticalAlignment="Top" HorizontalAlignment="Right" Click="DeleteSlotButton_Click">
                        <StackPanel Orientation="Vertical" Margin="5">
                            <Image Source="../Images/iconButton_RemoveLayer.png" Width="20" Height="20"/>
                        </StackPanel>
                    </Button>
                    <ListBox x:Name="LayerListBox"
                        BorderThickness="0" Margin="0,40,0,30"
                        HorizontalContentAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Background="Transparent"
                        ScrollViewer.HorizontalScrollBarVisibility="Disabled"  
                        ScrollViewer.VerticalScrollBarVisibility="Auto"
                        ItemsSource="{Binding Project.SelectedAlert.Slots, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        SelectedItem="{Binding Project.SelectedAlert.SelectedSlot, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        ItemContainerStyle="{StaticResource SlotListBoxItem}" />
                </Grid>
            </TabItem>
            
            <TabItem Header="Properties"
                Visibility="{Binding Project.SelectedAlert.HasSelectedControl, Mode=OneWay, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}">
                <ScrollViewer Margin="0" VerticalScrollBarVisibility="Auto">
                    <Grid Background="{StaticResource BackgroundLight}" DataContext="{Binding Project.SelectedAlert.SelectedControl, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="120"/>
                            <ColumnDefinition Width="244"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="Name:" Margin="5,10,0,0"/>
                        <TextBox Grid.Column="1" Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="5" MaxLength="30">
                            <i:Interaction.Behaviors>
                                <behaviors:TextBoxEnterKeyUpdateBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>


                        <TextBlock Text="Pixel Width:" Grid.Row="1" Margin="5,10,0,0"/>
                        <controls:PercentageControl Grid.Column="1" Grid.Row="1" Margin="5" 
                            MaxValue="{Binding MaxWidth, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            Value="{Binding Width, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                        <TextBlock Text="Pixel Height:" Grid.Row="2" Margin="5,10,0,0"/>
                        <controls:PercentageControl Grid.Column="1" Grid.Row="2" Margin="5" 
                            MaxValue="{Binding MaxHeight, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
                            Value="{Binding Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                        <TextBlock Text="Margin:" Grid.Row="3" Margin="5,0,0,0"  VerticalAlignment="Center"/>
                        <controls:MarginControl Grid.Column="1" Grid.Row="3"                      
                            MaxWidth="{Binding MaxWidth, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            MaxHeight="{Binding MaxHeight, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            MarginX="{Binding XX, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                            MarginY="{Binding YY, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                            MarginW="{Binding W, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                            MarginZ="{Binding Z, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>


                        <TextBlock Text="Opacity:" Grid.Row="4" Margin="5,10,0,0"/>
                        <Slider Grid.Column="1" Grid.Row="4" Margin="5" Value="{Binding Opacity, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="140" HorizontalAlignment="Left" VerticalAlignment="Center" Minimum="0" Maximum="1" IsSnapToTickEnabled="True" LargeChange=".05" TickFrequency="0.05" SmallChange="0.05"/>
                        <TextBox Grid.Column="1" Grid.Row="4" Margin="5" Text="{Binding Opacity, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:N2}}" Width="60"  MaxLength="5" HorizontalAlignment="Right" TextAlignment="Right">
                            <i:Interaction.Behaviors>
                                <behaviors:TextBoxEnterKeyUpdateBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>

                        <TextBlock Text="Background:" Grid.Row="5" Margin="5,10,0,0"/>
                        <ncore:ColorBox Grid.Column="1" Grid.Row="5" Margin="5" Brush="{Binding Background, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                      HorizontalAlignment="Left" Background="{StaticResource BackgroundLight}" Foreground="{StaticResource TextColor}" BorderBrush="{StaticResource TextColor}">
                            <ncore:ColorBox.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Copy" Click="CopyBrushClick">
                                        <MenuItem.Icon>
                                            <Image Source="../Images/iconButton_Copy_Hover.png" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Header="Paste" Click="PasteBrushClick">
                                        <MenuItem.Icon>
                                            <Image Source="../Images/iconButton_Paste_Hover.png" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </ContextMenu>
                            </ncore:ColorBox.ContextMenu>
                        </ncore:ColorBox>

                        <TextBlock Text="Border Brush:" Grid.Row="6" Margin="5,10,0,0"/>

                        <ncore:ColorBox Grid.Column="1" Grid.Row="6" Margin="5" Brush="{Binding BorderBrush, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                        HorizontalAlignment="Left" Background="{StaticResource BackgroundLight}" Foreground="{StaticResource TextColor}" BorderBrush="{StaticResource TextColor}">
                            <ncore:ColorBox.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Copy" Click="CopyBrushClick">
                                        <MenuItem.Icon>
                                            <Image Source="../Images/iconButton_Copy_Hover.png" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Header="Paste" Click="PasteBrushClick">
                                        <MenuItem.Icon>
                                            <Image Source="../Images/iconButton_Paste_Hover.png" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </ContextMenu>
                            </ncore:ColorBox.ContextMenu>
                        </ncore:ColorBox>

                        <TextBlock Text="Border Thickness:" Grid.Row="7" Margin="5,0,0,0" VerticalAlignment="Center"/>
                        <controls:MarginControl Grid.Column="1" Grid.Row="7" 
                            MaxWidth="{Binding MaxWidth, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            MaxHeight="{Binding MaxHeight, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            MarginX="{Binding BorderThicknessLeft, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            MarginY="{Binding BorderThicknessTop, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                            MarginW="{Binding BorderThicknessRight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                            MarginZ="{Binding BorderThicknessBottom, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                        <TextBlock Text="Horizontal Align:" Grid.Row="8" Margin="5,10,0,0"/>
                        <ComboBox Grid.Column="1" Grid.Row="8" Margin="5" ItemsSource="{Binding Source={StaticResource HorizontalAlignmentEnum}}" SelectedItem="{Binding HorizontalAlignment, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding .}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <TextBlock Text="Vertical Align:" Grid.Row="9" Margin="5,10,0,0"/>
                        <ComboBox Grid.Column="1" Grid.Row="9" Margin="5" ItemsSource="{Binding Source={StaticResource VerticalAlignmentEnum}}" SelectedItem="{Binding VerticalAlignment, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding .}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <TextBlock Text="Horizontal Flip:" Grid.Row="10" Margin="5,10,0,0"/>
                        <CheckBox Grid.Column="1" Grid.Row="10" Margin="5,10" IsChecked="{Binding HorizontalFlip, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                        <TextBlock Text="Vertical Flip:" Grid.Row="11" Margin="5,10,0,0"/>
                        <CheckBox Grid.Column="1" Grid.Row="11" Margin="5,10" IsChecked="{Binding VerticalFlip, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                        <TextBlock Text="Rotate:" Grid.Row="12" Margin="5,10,0,0"/>
                        <Slider Grid.Column="1" Grid.Row="12" Margin="5" Value="{Binding Rotate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="140" HorizontalAlignment="Left" VerticalAlignment="Center" Minimum="0" Maximum="360" IsSnapToTickEnabled="True" LargeChange="1" TickFrequency="1" SmallChange="1"/>
                        <TextBox Grid.Column="1" Grid.Row="12" Margin="5" Text="{Binding Rotate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:N0}}" Width="60" MaxLength="3" HorizontalAlignment="Right" TextAlignment="Right">
                            <i:Interaction.Behaviors>
                                <behaviors:TextBoxEnterKeyUpdateBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>
                        
                        <TextBlock Text="Stretch:" Grid.Row="13" Margin="5,10,0,0"/>
                        <ComboBox Grid.Column="1" Grid.Row="13" Margin="5" ItemsSource="{Binding Source={StaticResource StretchEnum}}" SelectedItem="{Binding Stretch, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding .}" />
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                        <TextBlock Text="Corner Radius:" Grid.Row="14" Margin="5,0,0,0" VerticalAlignment="Center"/>
                        <controls:CornerControl Grid.Column="1" Grid.Row="14" A="{Binding CornerRadiusTopLeft, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" B="{Binding CornerRadiusTopRight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                    C="{Binding CornerRadiusBottomRight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" D="{Binding CornerRadiusBottomLeft, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                        <TextBlock Text="ZIndex:" Grid.Row="15" Margin="5,10,0,0"/>
                        <TextBox Grid.Column="1" Grid.Row="15" Margin="5" Text="{Binding ZIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:N0}}" MaxLength="2" Width="57" HorizontalAlignment="Left" TextAlignment="Right">
                            <i:Interaction.Behaviors>
                                <behaviors:TextBoxEnterKeyUpdateBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>

                        <TextBlock Text="Font Family:" Grid.Row="16" Margin="5,10,0,0" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=FontFamily}"/>
                        <ComboBox Grid.Column="1" Grid.Row="16" Margin="5" ItemTemplate="{StaticResource FontFamilyTemplate}" ItemsSource="{Binding Source={StaticResource FontFamilyCollection}}" SelectedItem="{Binding FontFamily, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=FontFamily}"/>

                        <TextBlock Text="Font Size:" Grid.Row="17" Margin="5,10,0,0" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=FontSize}"/>
                        <TextBox Grid.Column="1" Grid.Row="17" Margin="5" Text="{Binding FontSize, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:N0}}" Width="50" MaxLength="3" HorizontalAlignment="Left" TextAlignment="Right" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=FontSize}">
                            <i:Interaction.Behaviors>
                                <behaviors:TextBoxEnterKeyUpdateBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>

                        <TextBlock Text="Foreground:" Grid.Row="18" Margin="5,10,0,0" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=Foreground}"/>

                        <ncore:ColorBox Grid.Column="1" Grid.Row="18" Margin="5" Brush="{Binding Foreground, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=Foreground}"
                                        HorizontalAlignment="Left" Background="{StaticResource BackgroundLight}" Foreground="{StaticResource TextColor}" BorderBrush="{StaticResource TextColor}">
                            <ncore:ColorBox.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Copy" Click="CopyBrushClick">
                                        <MenuItem.Icon>
                                            <Image Source="../Images/iconButton_Copy_Hover.png" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Header="Paste" Click="PasteBrushClick">
                                        <MenuItem.Icon>
                                            <Image Source="../Images/iconButton_Paste_Hover.png" />
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </ContextMenu>
                            </ncore:ColorBox.ContextMenu>
                        </ncore:ColorBox>


                        <TextBlock Text="Source:" Grid.Row="19" Margin="5,10,0,0" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=Source}"/>
                        <TextBox Grid.Column="1" Grid.Row="19" Margin="5" Text="{Binding Source, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=Source}">
                            <i:Interaction.Behaviors>
                                <behaviors:TextBoxEnterKeyUpdateBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>
                        <!--<Button Grid.Column="1" Grid.Row="19" Template="{StaticResource SimpleButton}" Width="20" Height="20" Margin="5,10,0,0" Command="local:CustomCommands.AddSource">
                            <Image Source="../Images/iconButton_AddDependantItemAfter.png" />
                        </Button>-->

                        <TextBlock Text="Text:" Grid.Row="20" Margin="5,10,0,0" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=Text}"/>
                        <TextBox Grid.Column="1" Grid.Row="20" Margin="5" Text="{Binding Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=Text}" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" AcceptsReturn="True" MaxHeight="100">
                            <i:Interaction.Behaviors>
                                <behaviors:TextBoxEnterKeyUpdateBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>

                        <TextBlock Text="Invert Direction:" Grid.Row="21" Margin="5,10,0,0" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=InvertDirection}"/>
                        <CheckBox Grid.Column="1" Grid.Row="21" Margin="5" IsChecked="{Binding InvertDirection, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=InvertDirection}"/>

                        <TextBlock Text="Duration:" Grid.Row="22" Margin="5,10,0,0" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=Duration}"/>
                        <TextBox Grid.Column="1" Grid.Row="22" Margin="5" Text="{Binding Duration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:hh}:{0:mm}:{0:ss}, FallbackValue=00:00:00}" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=Duration}">
                            <i:Interaction.Behaviors>
                                <behaviors:TextBoxEnterKeyUpdateBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>

                        <TextBlock Text="Url:" Grid.Row="23" Margin="5,10,0,0" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=Url}"/>
                        <TextBox Grid.Column="1" Grid.Row="23" Margin="5" Text="{Binding Url, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=Url}">
                            <i:Interaction.Behaviors>
                                <behaviors:TextBoxEnterKeyUpdateBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>

                        <TextBlock Text="Media Image:" Grid.Row="24" Margin="5,10,0,0" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=SocialMediaType}"/>
                        <ComboBox Grid.Column="1" Grid.Row="24" Margin="5" 
                                ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}, Path=SocialMedias, Mode=OneTime, UpdateSourceTrigger=PropertyChanged}" DisplayMemberPath="Name"
                                SelectedItem="{Binding SelectedSocialMedia, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=SocialMediaType}"/>

                        <TextBlock Text="Account Id:" Grid.Row="25" Margin="5,10,0,0" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=MediaAccountId}"/>
                        <TextBox Grid.Column="1" Grid.Row="25" Margin="5" Text="{Binding MediaAccountId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=MediaAccountId}">
                            <i:Interaction.Behaviors>
                                <behaviors:TextBoxEnterKeyUpdateBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>

                        <TextBlock Text="Page Name:" Grid.Row="26" Margin="5,10,0,0" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=MediaPageName}"/>
                        <TextBox Grid.Column="1" Grid.Row="26" Margin="5" Text="{Binding MediaPageName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=MediaPageName}">
                            <i:Interaction.Behaviors>
                                <behaviors:TextBoxEnterKeyUpdateBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>

                        <TextBlock Text="Type:" Grid.Row="27" Margin="5,10,0,0" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=Type}"/>
                        <TextBox Grid.Column="1" Grid.Row="27" Margin="5" Text="{Binding Type, Mode=OneTime}" IsReadOnly="True" Foreground="Red" Visibility="{Binding Type, Mode=OneWay, Converter={StaticResource PropertyToVisibility}, ConverterParameter=Type}">
                            <i:Interaction.Behaviors>
                                <behaviors:TextBoxEnterKeyUpdateBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>
                    </Grid>
                </ScrollViewer>
            </TabItem>

            <TabItem Header="Playlist"
                Visibility="{Binding Project.SelectedAlert.HasSelectedControl, Mode=OneWay, Converter={x:Static converters:BoolToVisibilityConverter.Collapsed}}">
                <Grid DataContext="{Binding Project.SelectedAlert.SelectedControl, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <TextBlock Text="{Binding Name, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, TargetNullValue='No selected element'}" Margin="5" />
                    <Button Template="{StaticResource SimpleButton}" ToolTip="Add Playlist" VerticalAlignment="Top" HorizontalAlignment="Right">
                        <Image Source="../Images/iconButton_AddLayer.png" Width="20" Height="20" Margin="5"/>
                        <Button.Triggers>
                            <EventTrigger RoutedEvent="Button.Click">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="ContextMenu.IsOpen">
                                                <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True"/>
                                            </BooleanAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Button.Triggers>
                        <Button.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Set Content" Click="AddPlaylistButton_Click"/>
                                <MenuItem Header="Delay" Click="AddPlaylistButton_Click"/>
                                <MenuItem Header="Animate Margin" Click="AddPlaylistButton_Click"/>
                                <MenuItem Header="Animate Opacity" Click="AddPlaylistButton_Click"/>
                                <MenuItem Header="Animate Width" Click="AddPlaylistButton_Click"/>
                                <MenuItem Header="Animate Height" Click="AddPlaylistButton_Click"/>
                                <MenuItem Header="Animate Border" Click="AddPlaylistButton_Click"/>
                                <MenuItem Header="Suspend Playback" Click="AddPlaylistButton_Click"/>
                                <MenuItem Header="Resume Playback" Click="AddPlaylistButton_Click"/>
                            </ContextMenu>
                        </Button.ContextMenu>
                    </Button>
                    <ListBox x:Name="PlaylistListBox"
                        BorderThickness="0" Margin="0,30,0,0"
                        HorizontalContentAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Background="Transparent"
                        ScrollViewer.HorizontalScrollBarVisibility="Disabled"  
                        ScrollViewer.VerticalScrollBarVisibility="Auto"  
                        ItemsSource="{Binding Playlist, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        SelectedItem="{Binding SelectedPlaylist, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                        ItemContainerStyle="{StaticResource PlaylistListBoxItem}"
                        />
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</UserControl>