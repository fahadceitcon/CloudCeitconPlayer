//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ceitcon_Downloader.CeitconServerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DownloadRequest", Namespace="http://schemas.datacontract.org/2004/07/Ceitcon_Service")]
    [System.SerializableAttribute()]
    public partial class DownloadRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long OffsetField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Offset {
            get {
                return this.OffsetField;
            }
            set {
                if ((this.OffsetField.Equals(value) != true)) {
                    this.OffsetField = value;
                    this.RaisePropertyChanged("Offset");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteFileInfo", Namespace="http://schemas.datacontract.org/2004/07/Ceitcon_Service")]
    [System.SerializableAttribute()]
    public partial class RemoteFileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BufferSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.IO.MemoryStream DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataArrayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BufferSize {
            get {
                return this.BufferSizeField;
            }
            set {
                if ((this.BufferSizeField.Equals(value) != true)) {
                    this.BufferSizeField = value;
                    this.RaisePropertyChanged("BufferSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Client {
            get {
                return this.ClientField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientField, value) != true)) {
                    this.ClientField = value;
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.IO.MemoryStream Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] DataArray {
            get {
                return this.DataArrayField;
            }
            set {
                if ((object.ReferenceEquals(this.DataArrayField, value) != true)) {
                    this.DataArrayField = value;
                    this.RaisePropertyChanged("DataArray");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string End {
            get {
                return this.EndField;
            }
            set {
                if ((object.ReferenceEquals(this.EndField, value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileList {
            get {
                return this.FileListField;
            }
            set {
                if ((object.ReferenceEquals(this.FileListField, value) != true)) {
                    this.FileListField = value;
                    this.RaisePropertyChanged("FileList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Start {
            get {
                return this.StartField;
            }
            set {
                if ((object.ReferenceEquals(this.StartField, value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SyncResponse", Namespace="http://schemas.datacontract.org/2004/07/Ceitcon_Service")]
    [System.SerializableAttribute()]
    public partial class SyncResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="CeitconServerService.ICeitconServer")]
    public interface ICeitconServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/ReadCDPFile", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/ReadCDPFileResponse")]
        string ReadCDPFile(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/ReadCDPFile", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/ReadCDPFileResponse")]
        System.Threading.Tasks.Task<string> ReadCDPFileAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/TestConnection", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/TestConnectionResponse")]
        string TestConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/TestConnection", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/TestConnectionResponse")]
        System.Threading.Tasks.Task<string> TestConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DownloadFile", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DownloadFileResponse")]
        Ceitcon_Downloader.CeitconServerService.RemoteFileInfo DownloadFile(Ceitcon_Downloader.CeitconServerService.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DownloadFile", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DownloadFileResponse")]
        System.Threading.Tasks.Task<Ceitcon_Downloader.CeitconServerService.RemoteFileInfo> DownloadFileAsync(Ceitcon_Downloader.CeitconServerService.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckUploadSceduler", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckUploadScedulerResponse")]
        string CheckUploadSceduler(string client, string files);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckUploadSceduler", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckUploadScedulerResponse")]
        System.Threading.Tasks.Task<string> CheckUploadScedulerAsync(string client, string files);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPreviosOffSet", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPreviosOffSetResponse")]
        long GetPreviosOffSet(string sFileName, string client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPreviosOffSet", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPreviosOffSetResponse")]
        System.Threading.Tasks.Task<long> GetPreviosOffSetAsync(string sFileName, string client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UploadScedulerCDP", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UploadScedulerCDPResponse")]
        bool UploadScedulerCDP(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UploadScedulerCDP", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UploadScedulerCDPResponse")]
        System.Threading.Tasks.Task<bool> UploadScedulerCDPAsync(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UploadScedulerChunk", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UploadScedulerChunkResponse")]
        Ceitcon_Downloader.CeitconServerService.SyncResponse UploadScedulerChunk(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UploadScedulerChunk", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UploadScedulerChunkResponse")]
        System.Threading.Tasks.Task<Ceitcon_Downloader.CeitconServerService.SyncResponse> UploadScedulerChunkAsync(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/ClearDictory", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/ClearDictoryResponse")]
        bool ClearDictory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/ClearDictory", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/ClearDictoryResponse")]
        System.Threading.Tasks.Task<bool> ClearDictoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UploadSceduler", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UploadScedulerResponse")]
        Ceitcon_Downloader.CeitconServerService.SyncResponse UploadSceduler(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UploadSceduler", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UploadScedulerResponse")]
        System.Threading.Tasks.Task<Ceitcon_Downloader.CeitconServerService.SyncResponse> UploadScedulerAsync(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteSceduler", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteScedulerResponse")]
        string DeleteSceduler(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteSceduler", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteScedulerResponse")]
        System.Threading.Tasks.Task<string> DeleteScedulerAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetSceduler", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetScedulerResponse")]
        string GetSceduler(string client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetSceduler", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetScedulerResponse")]
        System.Threading.Tasks.Task<string> GetScedulerAsync(string client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetAllScedulers", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetAllScedulersResponse")]
        string GetAllScedulers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetAllScedulers", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetAllScedulersResponse")]
        System.Threading.Tasks.Task<string> GetAllScedulersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/LoginUser", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/LoginUserResponse")]
        string LoginUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/LoginUser", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/LoginUserResponse")]
        System.Threading.Tasks.Task<string> LoginUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateUser", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateUserResponse")]
        string UpdateUser(string id, string groupId, string name, string password, string email, string phone, string permissions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateUser", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateUserResponse")]
        System.Threading.Tasks.Task<string> UpdateUserAsync(string id, string groupId, string name, string password, string email, string phone, string permissions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteUser", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteUserResponse")]
        string DeleteUser(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteUser", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteUserResponse")]
        System.Threading.Tasks.Task<string> DeleteUserAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetGroups", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetGroupsResponse")]
        string GetGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetGroups", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetGroupsResponse")]
        System.Threading.Tasks.Task<string> GetGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetNetwork", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetNetworkResponse")]
        string GetNetwork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetNetwork", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetNetworkResponse")]
        System.Threading.Tasks.Task<string> GetNetworkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateNetwork", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateNetworkResponse")]
        string UpdateNetwork(string type, string id, string parentId, string name, string description, bool active);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateNetwork", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateNetworkResponse")]
        System.Threading.Tasks.Task<string> UpdateNetworkAsync(string type, string id, string parentId, string name, string description, bool active);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteNetwork", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteNetworkResponse")]
        string DeleteNetwork(string type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteNetwork", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteNetworkResponse")]
        System.Threading.Tasks.Task<string> DeleteNetworkAsync(string type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckPlayerName", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckPlayerNameResponse")]
        string CheckPlayerName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckPlayerName", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckPlayerNameResponse")]
        System.Threading.Tasks.Task<string> CheckPlayerNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckPlayerExist", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckPlayerExistResponse")]
        string CheckPlayerExist(string name, string hostName, string ipAddress, int licence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckPlayerExist", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckPlayerExistResponse")]
        System.Threading.Tasks.Task<string> CheckPlayerExistAsync(string name, string hostName, string ipAddress, int licence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckFreeLicence", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckFreeLicenceResponse")]
        string CheckFreeLicence(int licence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckFreeLicence", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/CheckFreeLicenceResponse")]
        System.Threading.Tasks.Task<string> CheckFreeLicenceAsync(int licence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerName", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerNameResponse")]
        string GetPlayerName(string hostName, string ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerName", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerNameResponse")]
        System.Threading.Tasks.Task<string> GetPlayerNameAsync(string hostName, string ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerInfo", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerInfoResponse")]
        string GetPlayerInfo(string playerName, string hostName, string ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerInfo", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerInfoResponse")]
        System.Threading.Tasks.Task<string> GetPlayerInfoAsync(string playerName, string hostName, string ipAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/RegistratePlayer", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/RegistratePlayerResponse")]
        string RegistratePlayer(string name, string hostName, string ipAddress, int screens, int licence, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/RegistratePlayer", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/RegistratePlayerResponse")]
        System.Threading.Tasks.Task<string> RegistratePlayerAsync(string name, string hostName, string ipAddress, int screens, int licence, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdatePlayerStatus", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdatePlayerStatusResponse")]
        string UpdatePlayerStatus(string name, int screens, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdatePlayerStatus", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdatePlayerStatusResponse")]
        System.Threading.Tasks.Task<string> UpdatePlayerStatusAsync(string name, int screens, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerRefresh", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerRefreshResponse")]
        string GetPlayerRefresh(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerRefresh", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerRefreshResponse")]
        System.Threading.Tasks.Task<string> GetPlayerRefreshAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdatePlayerRefresh", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdatePlayerRefreshResponse")]
        string UpdatePlayerRefresh(string name, int refreshTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdatePlayerRefresh", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdatePlayerRefreshResponse")]
        System.Threading.Tasks.Task<string> UpdatePlayerRefreshAsync(string name, int refreshTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetWeathers", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetWeathersResponse")]
        string GetWeathers(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetWeathers", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetWeathersResponse")]
        System.Threading.Tasks.Task<string> GetWeathersAsync(string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/RegistredPlayerCount", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/RegistredPlayerCountResponse" +
            "")]
        string RegistredPlayerCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/RegistredPlayerCount", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/RegistredPlayerCountResponse" +
            "")]
        System.Threading.Tasks.Task<string> RegistredPlayerCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerLicence", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerLicenceResponse")]
        string GetPlayerLicence(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerLicence", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetPlayerLicenceResponse")]
        System.Threading.Tasks.Task<string> GetPlayerLicenceAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DisconnectPlayer", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DisconnectPlayerResponse")]
        string DisconnectPlayer(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DisconnectPlayer", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DisconnectPlayerResponse")]
        System.Threading.Tasks.Task<string> DisconnectPlayerAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/StopPlayer", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/StopPlayerResponse")]
        string StopPlayer(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/StopPlayer", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/StopPlayerResponse")]
        System.Threading.Tasks.Task<string> StopPlayerAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetDataSources", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetDataSourcesResponse")]
        string GetDataSources();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetDataSources", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetDataSourcesResponse")]
        System.Threading.Tasks.Task<string> GetDataSourcesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/InsertDataSource", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/InsertDataSourceResponse")]
        string InsertDataSource(string id, string name, string columns, string description, string type, string data, string url, string urlUsername, string urlPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/InsertDataSource", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/InsertDataSourceResponse")]
        System.Threading.Tasks.Task<string> InsertDataSourceAsync(string id, string name, string columns, string description, string type, string data, string url, string urlUsername, string urlPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateDataSource", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateDataSourceResponse")]
        string UpdateDataSource(string id, string name, string columns, string description, string type, string data, string url, string urlUsername, string urlPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateDataSource", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateDataSourceResponse")]
        System.Threading.Tasks.Task<string> UpdateDataSourceAsync(string id, string name, string columns, string description, string type, string data, string url, string urlUsername, string urlPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteDataSource", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteDataSourceResponse")]
        string DeleteDataSource(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteDataSource", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteDataSourceResponse")]
        System.Threading.Tasks.Task<string> DeleteDataSourceAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetDataRecords", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetDataRecordsResponse")]
        string GetDataRecords(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetDataRecords", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetDataRecordsResponse")]
        System.Threading.Tasks.Task<string> GetDataRecordsAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateLogo", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateLogoResponse")]
        Ceitcon_Downloader.CeitconServerService.SyncResponse UpdateLogo(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateLogo", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/UpdateLogoResponse")]
        System.Threading.Tasks.Task<Ceitcon_Downloader.CeitconServerService.SyncResponse> UpdateLogoAsync(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteLogo", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteLogoResponse")]
        string DeleteLogo(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteLogo", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/DeleteLogoResponse")]
        System.Threading.Tasks.Task<string> DeleteLogoAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetLogos", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetLogosResponse")]
        string GetLogos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetLogos", ReplyAction="http://Microsoft.ServiceModel.Samples/ICeitconServer/GetLogosResponse")]
        System.Threading.Tasks.Task<string> GetLogosAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICeitconServerChannel : Ceitcon_Downloader.CeitconServerService.ICeitconServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CeitconServerClient : System.ServiceModel.ClientBase<Ceitcon_Downloader.CeitconServerService.ICeitconServer>, Ceitcon_Downloader.CeitconServerService.ICeitconServer {
        
        public CeitconServerClient() {
        }
        
        public CeitconServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CeitconServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CeitconServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CeitconServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ReadCDPFile(string fileName) {
            return base.Channel.ReadCDPFile(fileName);
        }
        
        public System.Threading.Tasks.Task<string> ReadCDPFileAsync(string fileName) {
            return base.Channel.ReadCDPFileAsync(fileName);
        }
        
        public string TestConnection() {
            return base.Channel.TestConnection();
        }
        
        public System.Threading.Tasks.Task<string> TestConnectionAsync() {
            return base.Channel.TestConnectionAsync();
        }
        
        public Ceitcon_Downloader.CeitconServerService.RemoteFileInfo DownloadFile(Ceitcon_Downloader.CeitconServerService.DownloadRequest request) {
            return base.Channel.DownloadFile(request);
        }
        
        public System.Threading.Tasks.Task<Ceitcon_Downloader.CeitconServerService.RemoteFileInfo> DownloadFileAsync(Ceitcon_Downloader.CeitconServerService.DownloadRequest request) {
            return base.Channel.DownloadFileAsync(request);
        }
        
        public string CheckUploadSceduler(string client, string files) {
            return base.Channel.CheckUploadSceduler(client, files);
        }
        
        public System.Threading.Tasks.Task<string> CheckUploadScedulerAsync(string client, string files) {
            return base.Channel.CheckUploadScedulerAsync(client, files);
        }
        
        public long GetPreviosOffSet(string sFileName, string client) {
            return base.Channel.GetPreviosOffSet(sFileName, client);
        }
        
        public System.Threading.Tasks.Task<long> GetPreviosOffSetAsync(string sFileName, string client) {
            return base.Channel.GetPreviosOffSetAsync(sFileName, client);
        }
        
        public bool UploadScedulerCDP(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request) {
            return base.Channel.UploadScedulerCDP(request);
        }
        
        public System.Threading.Tasks.Task<bool> UploadScedulerCDPAsync(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request) {
            return base.Channel.UploadScedulerCDPAsync(request);
        }
        
        public Ceitcon_Downloader.CeitconServerService.SyncResponse UploadScedulerChunk(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request) {
            return base.Channel.UploadScedulerChunk(request);
        }
        
        public System.Threading.Tasks.Task<Ceitcon_Downloader.CeitconServerService.SyncResponse> UploadScedulerChunkAsync(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request) {
            return base.Channel.UploadScedulerChunkAsync(request);
        }
        
        public bool ClearDictory() {
            return base.Channel.ClearDictory();
        }
        
        public System.Threading.Tasks.Task<bool> ClearDictoryAsync() {
            return base.Channel.ClearDictoryAsync();
        }
        
        public Ceitcon_Downloader.CeitconServerService.SyncResponse UploadSceduler(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request) {
            return base.Channel.UploadSceduler(request);
        }
        
        public System.Threading.Tasks.Task<Ceitcon_Downloader.CeitconServerService.SyncResponse> UploadScedulerAsync(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request) {
            return base.Channel.UploadScedulerAsync(request);
        }
        
        public string DeleteSceduler(string id) {
            return base.Channel.DeleteSceduler(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteScedulerAsync(string id) {
            return base.Channel.DeleteScedulerAsync(id);
        }
        
        public string GetSceduler(string client) {
            return base.Channel.GetSceduler(client);
        }
        
        public System.Threading.Tasks.Task<string> GetScedulerAsync(string client) {
            return base.Channel.GetScedulerAsync(client);
        }
        
        public string GetAllScedulers() {
            return base.Channel.GetAllScedulers();
        }
        
        public System.Threading.Tasks.Task<string> GetAllScedulersAsync() {
            return base.Channel.GetAllScedulersAsync();
        }
        
        public string LoginUser(string username, string password) {
            return base.Channel.LoginUser(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginUserAsync(string username, string password) {
            return base.Channel.LoginUserAsync(username, password);
        }
        
        public string UpdateUser(string id, string groupId, string name, string password, string email, string phone, string permissions) {
            return base.Channel.UpdateUser(id, groupId, name, password, email, phone, permissions);
        }
        
        public System.Threading.Tasks.Task<string> UpdateUserAsync(string id, string groupId, string name, string password, string email, string phone, string permissions) {
            return base.Channel.UpdateUserAsync(id, groupId, name, password, email, phone, permissions);
        }
        
        public string DeleteUser(string id) {
            return base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteUserAsync(string id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public string GetGroups() {
            return base.Channel.GetGroups();
        }
        
        public System.Threading.Tasks.Task<string> GetGroupsAsync() {
            return base.Channel.GetGroupsAsync();
        }
        
        public string GetNetwork() {
            return base.Channel.GetNetwork();
        }
        
        public System.Threading.Tasks.Task<string> GetNetworkAsync() {
            return base.Channel.GetNetworkAsync();
        }
        
        public string UpdateNetwork(string type, string id, string parentId, string name, string description, bool active) {
            return base.Channel.UpdateNetwork(type, id, parentId, name, description, active);
        }
        
        public System.Threading.Tasks.Task<string> UpdateNetworkAsync(string type, string id, string parentId, string name, string description, bool active) {
            return base.Channel.UpdateNetworkAsync(type, id, parentId, name, description, active);
        }
        
        public string DeleteNetwork(string type, string id) {
            return base.Channel.DeleteNetwork(type, id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteNetworkAsync(string type, string id) {
            return base.Channel.DeleteNetworkAsync(type, id);
        }
        
        public string CheckPlayerName(string name) {
            return base.Channel.CheckPlayerName(name);
        }
        
        public System.Threading.Tasks.Task<string> CheckPlayerNameAsync(string name) {
            return base.Channel.CheckPlayerNameAsync(name);
        }
        
        public string CheckPlayerExist(string name, string hostName, string ipAddress, int licence) {
            return base.Channel.CheckPlayerExist(name, hostName, ipAddress, licence);
        }
        
        public System.Threading.Tasks.Task<string> CheckPlayerExistAsync(string name, string hostName, string ipAddress, int licence) {
            return base.Channel.CheckPlayerExistAsync(name, hostName, ipAddress, licence);
        }
        
        public string CheckFreeLicence(int licence) {
            return base.Channel.CheckFreeLicence(licence);
        }
        
        public System.Threading.Tasks.Task<string> CheckFreeLicenceAsync(int licence) {
            return base.Channel.CheckFreeLicenceAsync(licence);
        }
        
        public string GetPlayerName(string hostName, string ipAddress) {
            return base.Channel.GetPlayerName(hostName, ipAddress);
        }
        
        public System.Threading.Tasks.Task<string> GetPlayerNameAsync(string hostName, string ipAddress) {
            return base.Channel.GetPlayerNameAsync(hostName, ipAddress);
        }
        
        public string GetPlayerInfo(string playerName, string hostName, string ipAddress) {
            return base.Channel.GetPlayerInfo(playerName, hostName, ipAddress);
        }
        
        public System.Threading.Tasks.Task<string> GetPlayerInfoAsync(string playerName, string hostName, string ipAddress) {
            return base.Channel.GetPlayerInfoAsync(playerName, hostName, ipAddress);
        }
        
        public string RegistratePlayer(string name, string hostName, string ipAddress, int screens, int licence, int status) {
            return base.Channel.RegistratePlayer(name, hostName, ipAddress, screens, licence, status);
        }
        
        public System.Threading.Tasks.Task<string> RegistratePlayerAsync(string name, string hostName, string ipAddress, int screens, int licence, int status) {
            return base.Channel.RegistratePlayerAsync(name, hostName, ipAddress, screens, licence, status);
        }
        
        public string UpdatePlayerStatus(string name, int screens, int status) {
            return base.Channel.UpdatePlayerStatus(name, screens, status);
        }
        
        public System.Threading.Tasks.Task<string> UpdatePlayerStatusAsync(string name, int screens, int status) {
            return base.Channel.UpdatePlayerStatusAsync(name, screens, status);
        }
        
        public string GetPlayerRefresh(string name) {
            return base.Channel.GetPlayerRefresh(name);
        }
        
        public System.Threading.Tasks.Task<string> GetPlayerRefreshAsync(string name) {
            return base.Channel.GetPlayerRefreshAsync(name);
        }
        
        public string UpdatePlayerRefresh(string name, int refreshTime) {
            return base.Channel.UpdatePlayerRefresh(name, refreshTime);
        }
        
        public System.Threading.Tasks.Task<string> UpdatePlayerRefreshAsync(string name, int refreshTime) {
            return base.Channel.UpdatePlayerRefreshAsync(name, refreshTime);
        }
        
        public string GetWeathers(string location) {
            return base.Channel.GetWeathers(location);
        }
        
        public System.Threading.Tasks.Task<string> GetWeathersAsync(string location) {
            return base.Channel.GetWeathersAsync(location);
        }
        
        public string RegistredPlayerCount() {
            return base.Channel.RegistredPlayerCount();
        }
        
        public System.Threading.Tasks.Task<string> RegistredPlayerCountAsync() {
            return base.Channel.RegistredPlayerCountAsync();
        }
        
        public string GetPlayerLicence(string name) {
            return base.Channel.GetPlayerLicence(name);
        }
        
        public System.Threading.Tasks.Task<string> GetPlayerLicenceAsync(string name) {
            return base.Channel.GetPlayerLicenceAsync(name);
        }
        
        public string DisconnectPlayer(string name) {
            return base.Channel.DisconnectPlayer(name);
        }
        
        public System.Threading.Tasks.Task<string> DisconnectPlayerAsync(string name) {
            return base.Channel.DisconnectPlayerAsync(name);
        }
        
        public string StopPlayer(string name) {
            return base.Channel.StopPlayer(name);
        }
        
        public System.Threading.Tasks.Task<string> StopPlayerAsync(string name) {
            return base.Channel.StopPlayerAsync(name);
        }
        
        public string GetDataSources() {
            return base.Channel.GetDataSources();
        }
        
        public System.Threading.Tasks.Task<string> GetDataSourcesAsync() {
            return base.Channel.GetDataSourcesAsync();
        }
        
        public string InsertDataSource(string id, string name, string columns, string description, string type, string data, string url, string urlUsername, string urlPassword) {
            return base.Channel.InsertDataSource(id, name, columns, description, type, data, url, urlUsername, urlPassword);
        }
        
        public System.Threading.Tasks.Task<string> InsertDataSourceAsync(string id, string name, string columns, string description, string type, string data, string url, string urlUsername, string urlPassword) {
            return base.Channel.InsertDataSourceAsync(id, name, columns, description, type, data, url, urlUsername, urlPassword);
        }
        
        public string UpdateDataSource(string id, string name, string columns, string description, string type, string data, string url, string urlUsername, string urlPassword) {
            return base.Channel.UpdateDataSource(id, name, columns, description, type, data, url, urlUsername, urlPassword);
        }
        
        public System.Threading.Tasks.Task<string> UpdateDataSourceAsync(string id, string name, string columns, string description, string type, string data, string url, string urlUsername, string urlPassword) {
            return base.Channel.UpdateDataSourceAsync(id, name, columns, description, type, data, url, urlUsername, urlPassword);
        }
        
        public string DeleteDataSource(string id) {
            return base.Channel.DeleteDataSource(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteDataSourceAsync(string id) {
            return base.Channel.DeleteDataSourceAsync(id);
        }
        
        public string GetDataRecords(string id) {
            return base.Channel.GetDataRecords(id);
        }
        
        public System.Threading.Tasks.Task<string> GetDataRecordsAsync(string id) {
            return base.Channel.GetDataRecordsAsync(id);
        }
        
        public Ceitcon_Downloader.CeitconServerService.SyncResponse UpdateLogo(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request) {
            return base.Channel.UpdateLogo(request);
        }
        
        public System.Threading.Tasks.Task<Ceitcon_Downloader.CeitconServerService.SyncResponse> UpdateLogoAsync(Ceitcon_Downloader.CeitconServerService.RemoteFileInfo request) {
            return base.Channel.UpdateLogoAsync(request);
        }
        
        public string DeleteLogo(string id) {
            return base.Channel.DeleteLogo(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteLogoAsync(string id) {
            return base.Channel.DeleteLogoAsync(id);
        }
        
        public string GetLogos() {
            return base.Channel.GetLogos();
        }
        
        public System.Threading.Tasks.Task<string> GetLogosAsync() {
            return base.Channel.GetLogosAsync();
        }
    }
}
